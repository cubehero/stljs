// Generated by CoffeeScript 1.6.3
(function() {
  var Mustache, Stl, child_proc, fs, path, stl_pov;

  Mustache = require('mustache');

  stl_pov = require('./povray');

  fs = require('fs');

  path = require('path');

  child_proc = require('child_process');

  Stl = (function() {
    function Stl() {}

    return Stl;

  })();

  Stl.Image = (function() {
    function Image() {
      this.filePath = __dirname + "/../../template/povray.tmpl";
    }

    Image.prototype.convertFile = function(filePath) {
      var callback, convertSTL2POV, k, locals, options, progressCb, progresscb, start, stderrStr, thenInsertIntoTemplate, thenRenderToImage, thenWriteToTempFile, v, _ref,
        _this = this;
      options = {
        height: 240,
        width: 320,
        dst: "./result.png"
      };
      stderrStr = "";
      locals = {};
      if (typeof arguments[1] === 'function') {
        callback = arguments[1];
        progressCb = arguments[2];
      } else {
        _ref = arguments[1];
        for (k in _ref) {
          v = _ref[k];
          options[k] = v;
        }
        callback = arguments[2];
        progresscb = arguments[3];
      }
      start = convertSTL2POV = function() {
        return stl_pov.convertFile(filePath, function(err, povData, name) {
          if (err != null) {
            callback(err);
            return;
          }
          locals.modelData = povData;
          locals.modelName = name;
          locals.fileName = name + '_' + Math.floor(Math.random() * 1000000 + 1);
          return thenInsertIntoTemplate();
        }, function(err, povPolygon, name) {
          if (err != null) {
            callback(err);
            return;
          }
          if (progressCb != null) {
            return progressCb();
          }
        });
      };
      thenInsertIntoTemplate = function() {
        return _this.renderTemplate(_this.filePath, locals, function(err, povInput) {
          if (err != null) {
            callback(err);
            return;
          }
          return thenWriteToTempFile(povInput);
        });
      };
      thenWriteToTempFile = function(povInput) {
        return fs.writeFile("/tmp/" + locals.fileName + ".pov", povInput, function(err) {
          if (err != null) {
            callback(err);
            return;
          }
          return thenRenderToImage('temp.pov');
        });
      };
      thenRenderToImage = function(povFileName) {
        var povcmd;
        povcmd = child_proc.spawn('povray', ["/tmp/" + locals.fileName + ".pov", "+FN", "+W" + options.width, "+H" + options.height, "-o" + options.dst, "+Q9", "+AM1", "+A", "+UA"]);
        povcmd.stderr.on('data', function(data) {
          return stderrStr += data.toString();
        });
        return povcmd.on('exit', function(code) {
          var parsedError;
          if (code === 0) {
            return callback(null, stderrStr);
          } else {
            parsedError = _this._parseError(stderrStr);
            if (parsedError != null) {
              return callback(parsedError, stderrStr);
            } else {
              return callback(new Error("Exit code: " + code), stderrStr);
            }
          }
        });
      };
      return start();
    };

    Image.prototype.renderTemplate = function(filePath, locals, callback) {
      var _this = this;
      return fs.readFile(filePath, function(err, buffer) {
        var result;
        if (err != null) {
          callback(err);
          return;
        }
        result = Mustache.render(buffer.toString(), locals);
        return callback(null, result);
      });
    };

    Image.prototype._parseError = function(stderrstr) {
      var md;
      md = stderrstr.match(/(Integer parameter expected.*)/g);
      if (md !== null) {
        return new Error(md[0]);
      } else {
        return null;
      }
    };

    return Image;

  })();

  module.exports = new Stl.Image();

}).call(this);
